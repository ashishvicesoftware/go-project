basePath: /api/v1
definitions:
  models.AddressRequest:
    properties:
      city:
        example: Washington
        type: string
      line1:
        example: 1600 Pennsylvania Ave.
        type: string
      line2:
        example: Ste. 1234
        type: string
      postalCode:
        example: "20006"
        type: string
      stateProvince:
        example: DC
        type: string
    type: object
  models.AddressResponse:
    properties:
      city:
        example: Washington
        type: string
      createdAt:
        example: 1554441489907
        type: integer
      id:
        example: 1
        type: integer
      line1:
        example: 1600 Pennsylvania Ave.
        type: string
      line2:
        example: Ste. 1234
        type: string
      postalCode:
        example: "20006"
        type: string
      stateProvince:
        example: DC
        type: string
      updatedAt:
        example: 1554441489907
        type: integer
    type: object
  models.ContactRequest:
    properties:
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
    type: object
  models.ContactResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/models.AddressResponse'
        type: array
      createdAt:
        example: 1554441489907
        type: integer
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      updatedAt:
        example: 1554441489907
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.PingResponse:
    properties:
      msg:
        example: pong
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: '{{.Description}}'
  license: {}
  title: Vice Software Example API
  version: "1"
paths:
  /contacts:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContactResponse'
            type: array
      summary: Get all contacts
    post:
      consumes:
      - application/json
      parameters:
      - description: Create contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.ContactRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContactResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a contact
  /contacts/{contactID}:
    delete:
      parameters:
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Delete a contact
    get:
      parameters:
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContactResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a contact
    put:
      consumes:
      - application/json
      parameters:
      - description: Update contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.ContactRequest'
          type: object
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ContactResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a contact
  /contacts/{contactID}/addresses:
    get:
      parameters:
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AddressResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get all of a contact's addresses
    post:
      consumes:
      - application/json
      parameters:
      - description: Create address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.AddressRequest'
          type: object
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddressResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a contact address
  /contacts/{contactID}/addresses/{addressID}:
    delete:
      parameters:
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Delete a contact address
    get:
      parameters:
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddressResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a contact address
    put:
      consumes:
      - application/json
      parameters:
      - description: Update address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.AddressRequest'
          type: object
      - description: Contact ID
        in: path
        name: contactID
        required: true
        type: integer
      - description: Address ID
        in: path
        name: addressID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddressResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a contact address
  models.AddressResponse:
    properties:
      city:
        example: Washington
        type: string
      createdAt:
        example: 1554441489907
        type: integer
      id:
        example: 1
        type: integer
      line1:
        example: 1600 Pennsylvania Ave.
        type: string
      line2:
        example: Ste. 1234
        type: string
      postalCode:
        example: "20006"
        type: string
      stateProvince:
        example: DC
        type: string
      updatedAt:
        example: 1554441489907
        type: integer
    type: object
  models.ContactRequest:
    properties:
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
    type: object
  models.ContactResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/models.AddressResponse'
        type: array
      createdAt:
        example: 1554441489907
        type: integer
      firstName:
        example: John
        type: string
      id:
        example: 1
        type: integer
      lastName:
        example: Doe
        type: string
      updatedAt:
        example: 1554441489907
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.PingResponse:
    properties:
      msg:
        example: pong
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: '{{.Description}}'
  license: {}
  title: Vice Software Example API
  version: "1"
paths:
  /projects:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectResponse'
            type: array
      summary: Get all Projects
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Project
        in: body
        name: project Name
        required: true
        schema:
          $ref: '#/definitions/models.ProjectRequestCheck'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a project
  # /users:
  #   get:
  #     produces:
  #     - application/json
  #     responses:
  #       "200":
  #         description: OK
  #         schema:
  #           items:
  #             $ref: '#/definitions/models.ProjectResponse'
  #           type: array
  #     summary: Get all users
  /details:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectResponse'
            type: array
      summary: Get all details
   /notes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NoteResponse'
            type: array
      summary: Get Notes      
   /recent/activity:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectResponse'
            type: array
      summary: Get Recent Activity              
  /user/projects/recent:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RecentProjectResponse'
            type: object
      summary: Get all recent Projects    
  /property/{search}:
    get:
      parameters:
      - description: Search
        in: path
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScoutRedResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get Search Property  
  /projects/{projectID}:
    delete:
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Delete a project
    get:
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a contact
    put:
      consumes:
      - application/json
      parameters:
      - description: Update project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectUpdateRequest'
          type: object
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a Project   
  /invite/project/{projectID}:
     post:
      consumes:
      - application/json
      parameters:
      - description: send a invitation
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.InviteCollaboratorRequest'
          type: object
      - description: User ID
        in: path
        name: userID
        required: true
        type: string 
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer  
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InviteCollaboratorResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a contact
  /invitation/{invitationID}:
    delete:
      parameters:
      - description: Invitation ID
        in: path
        name: invitationID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Delete Invitation 
    put:
      consumes:
      - application/json
      parameters:
      - description: Accept Invitation
        in: body
        name: invitation
        required: true
        schema:
          $ref: '#/definitions/models.InviteUpdateRequest'
          type: object
      - description: Invitation ID
        in: path
        name: invitationID
        required: true
        type: integer  
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InviteCollaboratorResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a Property     
  /projects/{projectID}/property/{propertyID}/notes/{noteID}:
    delete:
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: integer    
      produces:
      - application/json
      responses:
        "200":
          description: '{}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Delete Note      
  /projects/{projectID}/properties:
    post:
      consumes:
      - application/json
      parameters:
      - description: Add property to project
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/models.AddPropertyRequest'
          type: object
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer    
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Add property to project 
    get:
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a property
  /projects/{projectID}/property/{propertyID}/notes:
      post:
      consumes:
      - application/json
      parameters:
      - description: Add note to property
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteRequest'
          type: object
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer 
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer  
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Add Note to Property
  /property/{propertyId}/notes:
    get:
      parameters:
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a Note
  /note/{noteID}:
      put:
      consumes:
      - application/json
      parameters:
      - description: Update Note
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteUpdateRequest'
          type: object
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: integer  
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a Note  
  /properties/{propertyID}:
     get:
      parameters:
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Get a Property 
  /users:
     post:
      consumes:
      - application/json
      parameters:
      - description: Create User
        in: body
        name: User Name
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a User 
  /property/{propertyID}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Update Property
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePropertyRequest'
          type: object
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer  
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Update a Property  
  /project/duplicate/{projectID}:
     post:
      consumes:
      - application/json
      parameters: 
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer    
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a project
  /duplicate/{projectID}/property/{propertyID}:
     post:
      consumes:
      - application/json
      parameters: 
      - description: Property ID
        in: path
        name: propertyID
        required: true
        type: integer   
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: integer      
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PropertyResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a project 
  /send/invite:
     post:
      consumes:
      - application/json
      parameters:
      - description: Send Email
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
             type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Send Email 
  /submit/feedback:
     post:
      consumes:
      - application/json
      parameters:
      - description: Submit Feedback
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
             type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Submit Feedback   
   /company/detail:
     post:
      consumes:
      - application/json
      parameters:
      - description: Company Information
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/models.CompanyRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
             type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Post Company Info        
  /invite/{inviteId}:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
             type: object
      summary: Accept Invitation
    post:
      consumes:
      - application/json
      parameters:
      - description: Create Project
        in: body
        name: project Name
        required: true
        schema:
          $ref: '#/definitions/models.ProjectRequestCheck'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Create a project 
  /search/codes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ContactResponse'
            type: array
      summary: Get all codes 
  /codes/{codeID}/notes:
      post:
      consumes:
      - application/json
      parameters:
      - description: Add note to codes
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.CodeNoteRequest'
          type: object
      - description: Code ID
        in: path
        name: codeID
        required: true
        type: integer 
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Add Note to Code                                       
  /codeCollection:
      post:
      consumes:
      - application/json
      parameters:
      - description: Add Codes to Collections
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.CodeCollectionsRequest'
          type: object
      - description: Code ID
        in: path
        name: codeID
        required: true
        type: integer 
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CodeCollectionsResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Add Note to Code      
  /inviter/details/{projectID}:
     post:
      consumes:
      - application/json
      parameters:
      - description: Accept Project
        in: body
        name: Email
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
             type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
            type: object
      summary: Send Email         
  /ping:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PingResponse'
            type: object
      summary: Ping server
swagger: "2.0"
